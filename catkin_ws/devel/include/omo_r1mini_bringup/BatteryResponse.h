// Generated by gencpp from file omo_r1mini_bringup/BatteryResponse.msg
// DO NOT EDIT!


#ifndef OMO_R1MINI_BRINGUP_MESSAGE_BATTERYRESPONSE_H
#define OMO_R1MINI_BRINGUP_MESSAGE_BATTERYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace omo_r1mini_bringup
{
template <class ContainerAllocator>
struct BatteryResponse_
{
  typedef BatteryResponse_<ContainerAllocator> Type;

  BatteryResponse_()
    : volt(0.0)
    , SOC(0.0)
    , current(0.0)  {
    }
  BatteryResponse_(const ContainerAllocator& _alloc)
    : volt(0.0)
    , SOC(0.0)
    , current(0.0)  {
  (void)_alloc;
    }



   typedef double _volt_type;
  _volt_type volt;

   typedef double _SOC_type;
  _SOC_type SOC;

   typedef double _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryResponse_

typedef ::omo_r1mini_bringup::BatteryResponse_<std::allocator<void> > BatteryResponse;

typedef boost::shared_ptr< ::omo_r1mini_bringup::BatteryResponse > BatteryResponsePtr;
typedef boost::shared_ptr< ::omo_r1mini_bringup::BatteryResponse const> BatteryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator1> & lhs, const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.volt == rhs.volt &&
    lhs.SOC == rhs.SOC &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator1> & lhs, const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace omo_r1mini_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d9c08bbb8192da6b3949691563ecb91";
  }

  static const char* value(const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d9c08bbb8192da6ULL;
  static const uint64_t static_value2 = 0xb3949691563ecb91ULL;
};

template<class ContainerAllocator>
struct DataType< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "omo_r1mini_bringup/BatteryResponse";
  }

  static const char* value(const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 volt\n"
"float64 SOC\n"
"float64 current\n"
;
  }

  static const char* value(const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.volt);
      stream.next(m.SOC);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::omo_r1mini_bringup::BatteryResponse_<ContainerAllocator>& v)
  {
    s << indent << "volt: ";
    Printer<double>::stream(s, indent + "  ", v.volt);
    s << indent << "SOC: ";
    Printer<double>::stream(s, indent + "  ", v.SOC);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OMO_R1MINI_BRINGUP_MESSAGE_BATTERYRESPONSE_H
